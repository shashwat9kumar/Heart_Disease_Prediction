# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sKVwKPEe2vU7mzQaTkASO19aw1nVci24
"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("https://raw.githubusercontent.com/pydeveloperashish/Heart-Disease-Prediction/master/heart.csv")
df.head()


## https://www.kaggle.com/ronitf/heart-disease-uci

info = ["age","1: male, 0: female","chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic","resting blood pressure"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved","exercise induced angina","oldpeak = ST depression induced by exercise relative to rest","the slope of the peak exercise ST segment","number of major vessels (0-3) colored by flourosopy","thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"]

info_df = {}
for i, column in enumerate(df.columns):
    if column == 'target':
        info_df[column] = 'Result: 0 if no heart disease, 1 if there is'
    else:
        info_df[column] = info[i]

info_df

df.groupby('target').size()

df.shape

df.describe()

df.isna().sum()

df.isnull().sum()

df.info()

"""## Visualizations"""

df.hist(figsize=(14,14));

sns.barplot(x=df['sex'], y=df['target'])  # sex on X axis and target on Y axis

sns.barplot(x=df['sex'], y=df['target'], estimator=len)  # sex on X axis and target on Y axis

df.groupby('sex').target.value_counts()

plt.figure(figsize=(7,7))
sns.barplot(df['sex'], df['age'], hue=df['target'])
# sns.barplot(x='sex', y='age', data=df, hue=df['target']) #or this
plt.show()

sns.displot(data=df, x='cp', hue='target', multiple='stack', bins=4)

sns.displot(data=df, x='cp', hue='target', kind='kde')

df.groupby('cp').target.value_counts().unstack()

sns.histplot(df, x='ca', hue='target', multiple='dodge')

df.groupby('ca').target.value_counts().unstack()

sns.histplot(df, x="oldpeak", y="target", hue="target", cbar=True)

df.groupby('target').oldpeak.value_counts().unstack().fillna(0)

sns.displot(df, x="thalach", hue="target", multiple='dodge', stat='probability')

sns.displot(df, x="trestbps", hue="target", multiple='dodge')

sns.displot(df, x="trestbps", hue="target", kind='kde', fill=True)

df.describe()

numeric_columns=['age', 'trestbps', 'chol', 'oldpeak', 'thalach']

## Get a datafreame where 'thal' isin [0, 1] ==> df[df.thal.isin([0, 1])]
## Show the desired columns using list arguments to the above dataframe

df[df.thal.isin([0, 1])][['age', 'sex', 'chol', 'cp', 'fbs']]

sns.pairplot(df,
             hue='target',
             vars=numeric_columns,
             palette='flare',
             plot_kws={'palette':'plasma'})

# from ipywidgets import interactive

# def size_of_the_widget(height=2.5, aspect=1):
#     sns.pairplot(df,
#              hue='target',
#              vars=numeric_columns,
#              palette='flare',
#              plot_kws={'palette':'plasma'},
#              height=height,
#              aspect=aspect)

# interactive(size_of_the_widget, height=(1, 4, 0.5), aspect=(0.4, 2, 0.2))

sns.pairplot(df,
             hue='target',
            #  vars=numeric_columns,
             palette='flare',
             plot_kws={'palette':'plasma'})

df.corr()

plt.figure(figsize=(15,15))
plt.xticks(rotation=20, fontsize=15)
plt.yticks(rotation=20, fontsize=15)
sns.heatmap(df.corr(), 
            cmap='RdBu', 
            center=0, 
            vmin=-1, 
            vmax=1, # Center makes the color palette bar center at 0 and vmin, vmax is used to define end boundaries of the color bar
            annot=True,
            fmt="0.3f",
            annot_kws = {
                "fontsize": 10,
                "fontweight": 'bold'
            },
            linewidth=1,
            linecolor='black',
            square=True)  ## Square = True will ensure that all blocks are squares
plt.show()

df.head()

categorical_columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']
numerical_columns = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']

len(categorical_columns) + len(numerical_columns)

y = df.target
X = df.drop('target', axis=1)

X.head()

y.head()

dataset = pd.get_dummies(X, columns=categorical_columns)

dataset.head()

from sklearn.preprocessing import StandardScaler

std_scaler = StandardScaler()
dataset[numerical_columns] = std_scaler.fit_transform(dataset[numerical_columns])
dataset.head()

X = dataset

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, shuffle=True)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

X_train.head()

from sklearn.tree import DecisionTreeClassifier

clf_dtc = DecisionTreeClassifier(random_state=42)
clf_dtc.get_params()

clf_dtc.fit(X_train, y_train)

predictions_dtc = clf_dtc.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(y_test, predictions_dtc)

confusion_matrix(y_test, predictions_dtc)

import seaborn as sns

plt.figure(figsize=(7,7))
sns.heatmap(confusion_matrix(y_test, predictions_dtc),
            annot=True,
            cmap="Blues",
            square=True,
            xticklabels=['No Disease', 'Disease'],
            yticklabels=['No Disease', 'Disease'])
plt.xlabel("Predicted", fontsize=15)
plt.ylabel("Actual", fontsize=15)
plt.show()

from sklearn.neighbors import KNeighborsClassifier

clf_knn = KNeighborsClassifier(n_neighbors=10)
clf_knn.get_params()

clf_knn.fit(X_train, y_train)

predictions_knn = clf_knn.predict(X_test)
accuracy_score(y_test, predictions_knn)

plt.figure(figsize=(7,7))
sns.heatmap(confusion_matrix(y_test, predictions_knn),
            annot=True,
            cmap="Blues",
            square=True,
            xticklabels=['No Disease', 'Disease'],
            yticklabels=['No Disease', 'Disease'])
plt.xlabel("Predicted", fontsize=15)
plt.ylabel("Actual", fontsize=15)
plt.show()

from sklearn.model_selection import cross_val_score

cross_validation_accuracy_knn = []
for i in range(1, 26):
    clf_knn = KNeighborsClassifier(n_neighbors=i)
    scores = cross_val_score(clf_knn, X, y, cv=5)
    print(f"Average Accuracy Score when neighbours are {i} is: \t", scores.mean())
    cross_validation_accuracy_knn.append(scores.mean())

plt.figure(figsize=(20,10))
plt.plot([i for i in range(1, 26)], [i*100.0 for i in cross_validation_accuracy_knn])
for i in range(1, 26):
    plt.text(i, cross_validation_accuracy_knn[i-1]*100 + 0.2, s=f'{cross_validation_accuracy_knn[i-1]*100:.3f}%')

from sklearn.ensemble import RandomForestClassifier

clf_rfc = RandomForestClassifier(n_estimators=10, random_state=42)
clf_rfc.get_params()

clf_rfc.fit(X_train, y_train)

predictions_rfc = clf_rfc.predict(X_test)
accuracy_score(y_test, predictions_rfc)

plt.figure(figsize=(7,7))
sns.heatmap(confusion_matrix(y_test, predictions_rfc),
            annot=True,
            cmap="Blues",
            square=True,
            xticklabels=['No Disease', 'Disease'],
            yticklabels=['No Disease', 'Disease'])
plt.xlabel("Predicted", fontsize=15)
plt.ylabel("Actual", fontsize=15)
plt.show()

cross_validation_accuracy_rfc = {}
for i in range(10, 201, 5):
    clf_rfc = RandomForestClassifier(n_estimators=i, random_state=42)
    scores = cross_val_score(clf_rfc, X, y, cv=5)
    print(f"Average Accuracy Score when estimators are {i} is: \t", scores.mean())
    cross_validation_accuracy_rfc[i] = scores.mean()

plt.figure(figsize=(25,10))
plt.plot([i for i in range(10, 201, 5)], [i*100.0 for i in cross_validation_accuracy_rfc.values()])
for k,v in cross_validation_accuracy_rfc.items():
    plt.text(k, cross_validation_accuracy_rfc[k]*100 + 0.2, s=f'{cross_validation_accuracy_rfc[k]*100:.3f}%')

